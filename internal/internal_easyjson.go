// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package internal

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2a877177DecodeGithubComPinptJiraInternal(in *jlexer.Lexer, out *webhookEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "webhookEvent":
			out.Event = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal(out *jwriter.Writer, in webhookEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"webhookEvent\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v webhookEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v webhookEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *webhookEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *webhookEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal1(in *jlexer.Lexer, out *valueValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal1(out *jwriter.Writer, in valueValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v valueValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v valueValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *valueValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *valueValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal1(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal2(in *jlexer.Lexer, out *userValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountId":
			if in.IsNull() {
				in.Skip()
				out.AccountID = nil
			} else {
				if out.AccountID == nil {
					out.AccountID = new(string)
				}
				*out.AccountID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal2(out *jwriter.Writer, in userValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix[1:])
		if in.AccountID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AccountID))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal2(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal3(in *jlexer.Lexer, out *userGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal3(out *jwriter.Writer, in userGroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal3(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal4(in *jlexer.Lexer, out *user) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountId":
			out.AccountID = string(in.String())
		case "self":
			out.Self = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "emailAddress":
			out.EmailAddress = string(in.String())
		case "avatarUrls":
			(out.Avatars).UnmarshalEasyJSON(in)
		case "displayName":
			out.DisplayName = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "timeZone":
			out.Timezone = string(in.String())
		case "groups":
			easyjson2a877177Decode(in, &out.Groups)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal4(out *jwriter.Writer, in user) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix)
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"emailAddress\":"
		out.RawString(prefix)
		out.String(string(in.EmailAddress))
	}
	{
		const prefix string = ",\"avatarUrls\":"
		out.RawString(prefix)
		(in.Avatars).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"timeZone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix)
		easyjson2a877177Encode(out, in.Groups)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v user) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v user) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *user) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *user) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal4(l, v)
}
func easyjson2a877177Decode(in *jlexer.Lexer, out *struct {
	Groups []userGroup `json:"items,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]userGroup, 0, 4)
					} else {
						out.Groups = []userGroup{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v1 userGroup
					(v1).UnmarshalEasyJSON(in)
					out.Groups = append(out.Groups, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode(out *jwriter.Writer, in struct {
	Groups []userGroup `json:"items,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Groups) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Groups {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptJiraInternal5(in *jlexer.Lexer, out *transitionSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "to":
			easyjson2a877177Decode1(in, &out.To)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal5(out *jwriter.Writer, in transitionSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		easyjson2a877177Encode1(out, in.To)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v transitionSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v transitionSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *transitionSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *transitionSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal5(l, v)
}
func easyjson2a877177Decode1(in *jlexer.Lexer, out *struct {
	StatusCategory statusCategory `json:"statusCategory"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statusCategory":
			(out.StatusCategory).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode1(out *jwriter.Writer, in struct {
	StatusCategory statusCategory `json:"statusCategory"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statusCategory\":"
		out.RawString(prefix[1:])
		(in.StatusCategory).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptJiraInternal6(in *jlexer.Lexer, out *statusCategory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal6(out *jwriter.Writer, in statusCategory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v statusCategory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v statusCategory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *statusCategory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *statusCategory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal6(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal7(in *jlexer.Lexer, out *status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "statusCategory":
			(out.StatusCategory).UnmarshalEasyJSON(in)
		case "id":
			out.ID = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "iconUrl":
			out.IconURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal7(out *jwriter.Writer, in status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"statusCategory\":"
		out.RawString(prefix)
		(in.StatusCategory).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"iconUrl\":"
		out.RawString(prefix)
		out.String(string(in.IconURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal7(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal8(in *jlexer.Lexer, out *sprintUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "startDate":
			if in.IsNull() {
				in.Skip()
				out.StartDate = nil
			} else {
				if out.StartDate == nil {
					out.StartDate = new(string)
				}
				*out.StartDate = string(in.String())
			}
		case "endDate":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(string)
				}
				*out.EndDate = string(in.String())
			}
		case "goal":
			if in.IsNull() {
				in.Skip()
				out.Goal = nil
			} else {
				if out.Goal == nil {
					out.Goal = new(string)
				}
				*out.Goal = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal8(out *jwriter.Writer, in sprintUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.State))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Name))
	}
	if in.StartDate != nil {
		const prefix string = ",\"startDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StartDate))
	}
	if in.EndDate != nil {
		const prefix string = ",\"endDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.EndDate))
	}
	if in.Goal != nil {
		const prefix string = ",\"goal\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Goal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sprintUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sprintUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sprintUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sprintUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal8(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal9(in *jlexer.Lexer, out *sprintProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "self":
			out.Self = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = string(in.String())
		case "startDate":
			if in.IsNull() {
				in.Skip()
				out.StartDate = nil
			} else {
				if out.StartDate == nil {
					out.StartDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StartDate).UnmarshalJSON(data))
				}
			}
		case "completeDate":
			if in.IsNull() {
				in.Skip()
				out.CompleteDate = nil
			} else {
				if out.CompleteDate == nil {
					out.CompleteDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CompleteDate).UnmarshalJSON(data))
				}
			}
		case "endDate":
			if in.IsNull() {
				in.Skip()
				out.EndDate = nil
			} else {
				if out.EndDate == nil {
					out.EndDate = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EndDate).UnmarshalJSON(data))
				}
			}
		case "goal":
			if in.IsNull() {
				in.Skip()
				out.Goal = nil
			} else {
				if out.Goal == nil {
					out.Goal = new(string)
				}
				*out.Goal = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal9(out *jwriter.Writer, in sprintProjection) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix)
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	if in.StartDate != nil {
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Raw((*in.StartDate).MarshalJSON())
	}
	{
		const prefix string = ",\"completeDate\":"
		out.RawString(prefix)
		if in.CompleteDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CompleteDate).MarshalJSON())
		}
	}
	if in.EndDate != nil {
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Raw((*in.EndDate).MarshalJSON())
	}
	if in.Goal != nil {
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.String(string(*in.Goal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sprintProjection) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sprintProjection) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sprintProjection) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sprintProjection) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal9(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal10(in *jlexer.Lexer, out *sprintCreate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "startDate":
			out.StartDate = string(in.String())
		case "endDate":
			out.EndDate = string(in.String())
		case "originBoardId":
			out.OriginBoardID = int(in.Int())
		case "goal":
			out.Goal = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal10(out *jwriter.Writer, in sprintCreate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	{
		const prefix string = ",\"originBoardId\":"
		out.RawString(prefix)
		out.Int(int(in.OriginBoardID))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.String(string(in.Goal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sprintCreate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sprintCreate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sprintCreate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sprintCreate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal10(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal11(in *jlexer.Lexer, out *sprint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = string(in.String())
		case "boardId":
			out.OriginBoardID = int(in.Int())
		case "goal":
			out.Goal = string(in.String())
		case "startDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDate).UnmarshalJSON(data))
			}
		case "endDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndDate).UnmarshalJSON(data))
			}
		case "completeDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CompleteDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal11(out *jwriter.Writer, in sprint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"boardId\":"
		out.RawString(prefix)
		out.Int(int(in.OriginBoardID))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.String(string(in.Goal))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Raw((in.StartDate).MarshalJSON())
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Raw((in.EndDate).MarshalJSON())
	}
	{
		const prefix string = ",\"completeDate\":"
		out.RawString(prefix)
		out.Raw((in.CompleteDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v sprint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v sprint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *sprint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *sprint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal11(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal12(in *jlexer.Lexer, out *setMutationOperation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "set":
			if m, ok := out.Set.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Set.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Set = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal12(out *jwriter.Writer, in setMutationOperation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"set\":"
		out.RawString(prefix[1:])
		if m, ok := in.Set.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Set.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Set))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v setMutationOperation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v setMutationOperation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *setMutationOperation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *setMutationOperation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal12(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal13(in *jlexer.Lexer, out *projectSearchResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxResults":
			out.MaxResults = int(in.Int())
		case "startAt":
			out.StartAt = int(in.Int())
		case "total":
			out.Total = int(in.Int())
		case "isLast":
			out.IsLast = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal13(out *jwriter.Writer, in projectSearchResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxResults\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MaxResults))
	}
	{
		const prefix string = ",\"startAt\":"
		out.RawString(prefix)
		out.Int(int(in.StartAt))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"isLast\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLast))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v projectSearchResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v projectSearchResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *projectSearchResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *projectSearchResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal13(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal14(in *jlexer.Lexer, out *projectQueryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Projects = nil
			} else {
				in.Delim('[')
				if out.Projects == nil {
					if !in.IsDelim(']') {
						out.Projects = make([]project, 0, 1)
					} else {
						out.Projects = []project{}
					}
				} else {
					out.Projects = (out.Projects)[:0]
				}
				for !in.IsDelim(']') {
					var v4 project
					(v4).UnmarshalEasyJSON(in)
					out.Projects = append(out.Projects, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal14(out *jwriter.Writer, in projectQueryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		if in.Projects == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Projects {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v projectQueryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v projectQueryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *projectQueryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *projectQueryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal14(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal15(in *jlexer.Lexer, out *project) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expand":
			out.Expand = string(in.String())
		case "self":
			out.Self = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "issueTypes":
			if in.IsNull() {
				in.Skip()
				out.IssueTypes = nil
			} else {
				in.Delim('[')
				if out.IssueTypes == nil {
					if !in.IsDelim(']') {
						out.IssueTypes = make([]struct {
							Self        string `json:"self"`
							ID          string `json:"id"`
							Description string `json:"description"`
							IconURL     string `json:"iconUrl"`
							Name        string `json:"name"`
							Subtask     bool   `json:"subtask"`
							AvatarID    int    `json:"avatarId,omitempty"`
						}, 0, 1)
					} else {
						out.IssueTypes = []struct {
							Self        string `json:"self"`
							ID          string `json:"id"`
							Description string `json:"description"`
							IconURL     string `json:"iconUrl"`
							Name        string `json:"name"`
							Subtask     bool   `json:"subtask"`
							AvatarID    int    `json:"avatarId,omitempty"`
						}{}
					}
				} else {
					out.IssueTypes = (out.IssueTypes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						Self        string `json:"self"`
						ID          string `json:"id"`
						Description string `json:"description"`
						IconURL     string `json:"iconUrl"`
						Name        string `json:"name"`
						Subtask     bool   `json:"subtask"`
						AvatarID    int    `json:"avatarId,omitempty"`
					}
					easyjson2a877177Decode2(in, &v7)
					out.IssueTypes = append(out.IssueTypes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			out.Name = string(in.String())
		case "avatarUrls":
			easyjson2a877177Decode3(in, &out.AvatarUrls)
		case "projectKeys":
			if in.IsNull() {
				in.Skip()
				out.ProjectKeys = nil
			} else {
				in.Delim('[')
				if out.ProjectKeys == nil {
					if !in.IsDelim(']') {
						out.ProjectKeys = make([]string, 0, 4)
					} else {
						out.ProjectKeys = []string{}
					}
				} else {
					out.ProjectKeys = (out.ProjectKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.ProjectKeys = append(out.ProjectKeys, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "projectCategory":
			easyjson2a877177Decode4(in, &out.ProjectCategory)
		case "projectTypeKey":
			out.ProjectTypeKey = string(in.String())
		case "simplified":
			out.Simplified = bool(in.Bool())
		case "style":
			out.Style = string(in.String())
		case "isPrivate":
			out.IsPrivate = bool(in.Bool())
		case "entityId":
			out.EntityID = string(in.String())
		case "uuid":
			out.UUID = string(in.String())
		case "insight":
			if in.IsNull() {
				in.Skip()
				out.Insight = nil
			} else {
				if out.Insight == nil {
					out.Insight = new(struct {
						TotalIssueCount     int    `json:"totalIssueCount"`
						LastIssueUpdateTime string `json:"lastIssueUpdateTime"`
					})
				}
				easyjson2a877177Decode5(in, out.Insight)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal15(out *jwriter.Writer, in project) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"expand\":"
		out.RawString(prefix[1:])
		out.String(string(in.Expand))
	}
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix)
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"issueTypes\":"
		out.RawString(prefix)
		if in.IssueTypes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.IssueTypes {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson2a877177Encode2(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatarUrls\":"
		out.RawString(prefix)
		easyjson2a877177Encode3(out, in.AvatarUrls)
	}
	{
		const prefix string = ",\"projectKeys\":"
		out.RawString(prefix)
		if in.ProjectKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.ProjectKeys {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"projectCategory\":"
		out.RawString(prefix)
		easyjson2a877177Encode4(out, in.ProjectCategory)
	}
	{
		const prefix string = ",\"projectTypeKey\":"
		out.RawString(prefix)
		out.String(string(in.ProjectTypeKey))
	}
	{
		const prefix string = ",\"simplified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Simplified))
	}
	{
		const prefix string = ",\"style\":"
		out.RawString(prefix)
		out.String(string(in.Style))
	}
	{
		const prefix string = ",\"isPrivate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	if in.EntityID != "" {
		const prefix string = ",\"entityId\":"
		out.RawString(prefix)
		out.String(string(in.EntityID))
	}
	if in.UUID != "" {
		const prefix string = ",\"uuid\":"
		out.RawString(prefix)
		out.String(string(in.UUID))
	}
	if in.Insight != nil {
		const prefix string = ",\"insight\":"
		out.RawString(prefix)
		easyjson2a877177Encode5(out, *in.Insight)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v project) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v project) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *project) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *project) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal15(l, v)
}
func easyjson2a877177Decode5(in *jlexer.Lexer, out *struct {
	TotalIssueCount     int    `json:"totalIssueCount"`
	LastIssueUpdateTime string `json:"lastIssueUpdateTime"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalIssueCount":
			out.TotalIssueCount = int(in.Int())
		case "lastIssueUpdateTime":
			out.LastIssueUpdateTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode5(out *jwriter.Writer, in struct {
	TotalIssueCount     int    `json:"totalIssueCount"`
	LastIssueUpdateTime string `json:"lastIssueUpdateTime"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalIssueCount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalIssueCount))
	}
	{
		const prefix string = ",\"lastIssueUpdateTime\":"
		out.RawString(prefix)
		out.String(string(in.LastIssueUpdateTime))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode4(in *jlexer.Lexer, out *struct {
	Self        string `json:"self"`
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode4(out *jwriter.Writer, in struct {
	Self        string `json:"self"`
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode3(in *jlexer.Lexer, out *struct {
	Four8X48  string `json:"48x48"`
	Two4X24   string `json:"24x24"`
	One6X16   string `json:"16x16"`
	Three2X32 string `json:"32x32"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "48x48":
			out.Four8X48 = string(in.String())
		case "24x24":
			out.Two4X24 = string(in.String())
		case "16x16":
			out.One6X16 = string(in.String())
		case "32x32":
			out.Three2X32 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode3(out *jwriter.Writer, in struct {
	Four8X48  string `json:"48x48"`
	Two4X24   string `json:"24x24"`
	One6X16   string `json:"16x16"`
	Three2X32 string `json:"32x32"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"48x48\":"
		out.RawString(prefix[1:])
		out.String(string(in.Four8X48))
	}
	{
		const prefix string = ",\"24x24\":"
		out.RawString(prefix)
		out.String(string(in.Two4X24))
	}
	{
		const prefix string = ",\"16x16\":"
		out.RawString(prefix)
		out.String(string(in.One6X16))
	}
	{
		const prefix string = ",\"32x32\":"
		out.RawString(prefix)
		out.String(string(in.Three2X32))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode2(in *jlexer.Lexer, out *struct {
	Self        string `json:"self"`
	ID          string `json:"id"`
	Description string `json:"description"`
	IconURL     string `json:"iconUrl"`
	Name        string `json:"name"`
	Subtask     bool   `json:"subtask"`
	AvatarID    int    `json:"avatarId,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "iconUrl":
			out.IconURL = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "subtask":
			out.Subtask = bool(in.Bool())
		case "avatarId":
			out.AvatarID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode2(out *jwriter.Writer, in struct {
	Self        string `json:"self"`
	ID          string `json:"id"`
	Description string `json:"description"`
	IconURL     string `json:"iconUrl"`
	Name        string `json:"name"`
	Subtask     bool   `json:"subtask"`
	AvatarID    int    `json:"avatarId,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"iconUrl\":"
		out.RawString(prefix)
		out.String(string(in.IconURL))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"subtask\":"
		out.RawString(prefix)
		out.Bool(bool(in.Subtask))
	}
	if in.AvatarID != 0 {
		const prefix string = ",\"avatarId\":"
		out.RawString(prefix)
		out.Int(int(in.AvatarID))
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptJiraInternal16(in *jlexer.Lexer, out *mutationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "update":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Update = make(map[string][]setMutationOperation)
				} else {
					out.Update = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 []setMutationOperation
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						in.Delim('[')
						if v13 == nil {
							if !in.IsDelim(']') {
								v13 = make([]setMutationOperation, 0, 4)
							} else {
								v13 = []setMutationOperation{}
							}
						} else {
							v13 = (v13)[:0]
						}
						for !in.IsDelim(']') {
							var v14 setMutationOperation
							(v14).UnmarshalEasyJSON(in)
							v13 = append(v13, v14)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Update)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "transition":
			if in.IsNull() {
				in.Skip()
				out.Transition = nil
			} else {
				if out.Transition == nil {
					out.Transition = new(idValue)
				}
				(*out.Transition).UnmarshalEasyJSON(in)
			}
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fields = make(map[string]interface{})
				} else {
					out.Fields = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 interface{}
					if m, ok := v15.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v15.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v15 = in.Interface()
					}
					(out.Fields)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal16(out *jwriter.Writer, in mutationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Update) != 0 {
		const prefix string = ",\"update\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Update {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16Value {
						if v17 > 0 {
							out.RawByte(',')
						}
						(v18).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if in.Transition != nil {
		const prefix string = ",\"transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Transition).MarshalEasyJSON(out)
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Fields {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if m, ok := v19Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v mutationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v mutationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *mutationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *mutationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal16(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal17(in *jlexer.Lexer, out *linkedIssue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal17(out *jwriter.Writer, in linkedIssue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v linkedIssue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v linkedIssue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *linkedIssue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *linkedIssue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal17(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal18(in *jlexer.Lexer, out *keyValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal18(out *jwriter.Writer, in keyValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v keyValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v keyValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *keyValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *keyValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal18(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal19(in *jlexer.Lexer, out *issueTypesResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal19(out *jwriter.Writer, in issueTypesResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueTypesResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueTypesResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueTypesResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueTypesResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal19(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal20(in *jlexer.Lexer, out *issueType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "iconUrl":
			out.Icon = string(in.String())
		case "subtask":
			out.Subtask = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal20(out *jwriter.Writer, in issueType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"iconUrl\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"subtask\":"
		out.RawString(prefix)
		out.Bool(bool(in.Subtask))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal20(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal21(in *jlexer.Lexer, out *issueTransitionSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transitions":
			if in.IsNull() {
				in.Skip()
				out.Transitions = nil
			} else {
				in.Delim('[')
				if out.Transitions == nil {
					if !in.IsDelim(']') {
						out.Transitions = make([]transitionSource, 0, 1)
					} else {
						out.Transitions = []transitionSource{}
					}
				} else {
					out.Transitions = (out.Transitions)[:0]
				}
				for !in.IsDelim(']') {
					var v20 transitionSource
					(v20).UnmarshalEasyJSON(in)
					out.Transitions = append(out.Transitions, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal21(out *jwriter.Writer, in issueTransitionSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transitions\":"
		out.RawString(prefix[1:])
		if in.Transitions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Transitions {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueTransitionSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueTransitionSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueTransitionSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueTransitionSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal21(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal22(in *jlexer.Lexer, out *issueSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Fields = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 interface{}
					if m, ok := v23.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v23.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v23 = in.Interface()
					}
					(out.Fields)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "changelog":
			easyjson2a877177Decode6(in, &out.Changelog)
		case "transitions":
			if in.IsNull() {
				in.Skip()
				out.Transitions = nil
			} else {
				in.Delim('[')
				if out.Transitions == nil {
					if !in.IsDelim(']') {
						out.Transitions = make([]transitionSource, 0, 1)
					} else {
						out.Transitions = []transitionSource{}
					}
				} else {
					out.Transitions = (out.Transitions)[:0]
				}
				for !in.IsDelim(']') {
					var v24 transitionSource
					(v24).UnmarshalEasyJSON(in)
					out.Transitions = append(out.Transitions, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal22(out *jwriter.Writer, in issueSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		if in.Fields == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v25First := true
			for v25Name, v25Value := range in.Fields {
				if v25First {
					v25First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v25Name))
				out.RawByte(':')
				if m, ok := v25Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v25Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v25Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"changelog\":"
		out.RawString(prefix)
		easyjson2a877177Encode6(out, in.Changelog)
	}
	{
		const prefix string = ",\"transitions\":"
		out.RawString(prefix)
		if in.Transitions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Transitions {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal22(l, v)
}
func easyjson2a877177Decode6(in *jlexer.Lexer, out *struct {
	Histories []struct {
		ID      string          `json:"id"`
		Author  user            `json:"author"`
		Created string          `json:"created"`
		Items   []changeLogItem `json:"items"`
	} `json:"histories"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "histories":
			if in.IsNull() {
				in.Skip()
				out.Histories = nil
			} else {
				in.Delim('[')
				if out.Histories == nil {
					if !in.IsDelim(']') {
						out.Histories = make([]struct {
							ID      string          `json:"id"`
							Author  user            `json:"author"`
							Created string          `json:"created"`
							Items   []changeLogItem `json:"items"`
						}, 0, 1)
					} else {
						out.Histories = []struct {
							ID      string          `json:"id"`
							Author  user            `json:"author"`
							Created string          `json:"created"`
							Items   []changeLogItem `json:"items"`
						}{}
					}
				} else {
					out.Histories = (out.Histories)[:0]
				}
				for !in.IsDelim(']') {
					var v28 struct {
						ID      string          `json:"id"`
						Author  user            `json:"author"`
						Created string          `json:"created"`
						Items   []changeLogItem `json:"items"`
					}
					easyjson2a877177Decode7(in, &v28)
					out.Histories = append(out.Histories, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode6(out *jwriter.Writer, in struct {
	Histories []struct {
		ID      string          `json:"id"`
		Author  user            `json:"author"`
		Created string          `json:"created"`
		Items   []changeLogItem `json:"items"`
	} `json:"histories"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"histories\":"
		out.RawString(prefix[1:])
		if in.Histories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Histories {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjson2a877177Encode7(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2a877177Decode7(in *jlexer.Lexer, out *struct {
	ID      string          `json:"id"`
	Author  user            `json:"author"`
	Created string          `json:"created"`
	Items   []changeLogItem `json:"items"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "created":
			out.Created = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]changeLogItem, 0, 1)
					} else {
						out.Items = []changeLogItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v31 changeLogItem
					(v31).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode7(out *jwriter.Writer, in struct {
	ID      string          `json:"id"`
	Author  user            `json:"author"`
	Created string          `json:"created"`
	Items   []changeLogItem `json:"items"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Items {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptJiraInternal23(in *jlexer.Lexer, out *issueQueryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "issues":
			if in.IsNull() {
				in.Skip()
				out.Issues = nil
			} else {
				in.Delim('[')
				if out.Issues == nil {
					if !in.IsDelim(']') {
						out.Issues = make([]issueSource, 0, 1)
					} else {
						out.Issues = []issueSource{}
					}
				} else {
					out.Issues = (out.Issues)[:0]
				}
				for !in.IsDelim(']') {
					var v34 issueSource
					(v34).UnmarshalEasyJSON(in)
					out.Issues = append(out.Issues, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal23(out *jwriter.Writer, in issueQueryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"issues\":"
		out.RawString(prefix)
		if in.Issues == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Issues {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueQueryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueQueryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueQueryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueQueryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal23(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal24(in *jlexer.Lexer, out *issuePriority) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "statusColor":
			out.StatusColor = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "iconUrl":
			out.IconURL = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal24(out *jwriter.Writer, in issuePriority) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"statusColor\":"
		out.RawString(prefix[1:])
		out.String(string(in.StatusColor))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"iconUrl\":"
		out.RawString(prefix)
		out.String(string(in.IconURL))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issuePriority) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issuePriority) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issuePriority) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issuePriority) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal24(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal25(in *jlexer.Lexer, out *issueMover) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issues":
			if in.IsNull() {
				in.Skip()
				out.IssueRefIDs = nil
			} else {
				in.Delim('[')
				if out.IssueRefIDs == nil {
					if !in.IsDelim(']') {
						out.IssueRefIDs = make([]string, 0, 4)
					} else {
						out.IssueRefIDs = []string{}
					}
				} else {
					out.IssueRefIDs = (out.IssueRefIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.IssueRefIDs = append(out.IssueRefIDs, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal25(out *jwriter.Writer, in issueMover) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issues\":"
		out.RawString(prefix[1:])
		if in.IssueRefIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.IssueRefIDs {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueMover) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueMover) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueMover) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueMover) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal25(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal26(in *jlexer.Lexer, out *issueFields) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "project":
			easyjson2a877177Decode8(in, &out.Project)
		case "description":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Description).UnmarshalJSON(data))
			}
		case "comment":
			easyjson2a877177Decode9(in, &out.Comment)
		case "summary":
			out.Summary = string(in.String())
		case "duedate":
			out.DueDate = string(in.String())
		case "created":
			out.Created = string(in.String())
		case "updated":
			out.Updated = string(in.String())
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(struct {
						ID  string `json:"id"`
						Key string `json:"key"`
					})
				}
				easyjson2a877177Decode8(in, out.Parent)
			}
		case "priority":
			easyjson2a877177Decode10(in, &out.Priority)
		case "issuetype":
			easyjson2a877177Decode10(in, &out.IssueType)
		case "status":
			easyjson2a877177Decode11(in, &out.Status)
		case "resolution":
			easyjson2a877177Decode12(in, &out.Resolution)
		case "creator":
			(out.Creator).UnmarshalEasyJSON(in)
		case "reporter":
			(out.Reporter).UnmarshalEasyJSON(in)
		case "assignee":
			(out.Assignee).UnmarshalEasyJSON(in)
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v40 string
					v40 = string(in.String())
					out.Labels = append(out.Labels, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "issuelinks":
			if in.IsNull() {
				in.Skip()
				out.IssueLinks = nil
			} else {
				in.Delim('[')
				if out.IssueLinks == nil {
					if !in.IsDelim(']') {
						out.IssueLinks = make([]struct {
							ID   string `json:"id"`
							Type struct {
								Name string `json:"name"`
							} `json:"type"`
							OutwardIssue linkedIssue `json:"outwardIssue"`
							InwardIssue  linkedIssue `json:"inwardIssue"`
						}, 0, 1)
					} else {
						out.IssueLinks = []struct {
							ID   string `json:"id"`
							Type struct {
								Name string `json:"name"`
							} `json:"type"`
							OutwardIssue linkedIssue `json:"outwardIssue"`
							InwardIssue  linkedIssue `json:"inwardIssue"`
						}{}
					}
				} else {
					out.IssueLinks = (out.IssueLinks)[:0]
				}
				for !in.IsDelim(']') {
					var v41 struct {
						ID   string `json:"id"`
						Type struct {
							Name string `json:"name"`
						} `json:"type"`
						OutwardIssue linkedIssue `json:"outwardIssue"`
						InwardIssue  linkedIssue `json:"inwardIssue"`
					}
					easyjson2a877177Decode13(in, &v41)
					out.IssueLinks = append(out.IssueLinks, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attachment":
			if in.IsNull() {
				in.Skip()
				out.Attachment = nil
			} else {
				in.Delim('[')
				if out.Attachment == nil {
					if !in.IsDelim(']') {
						out.Attachment = make([]struct {
							ID       string `json:"id"`
							Filename string `json:"filename"`
							Author   struct {
								Key       string `json:"key"`
								AccountID string `json:"accountId"`
							} `json:"author"`
							Created   string `json:"created"`
							Size      int    `json:"size"`
							MimeType  string `json:"mimeType"`
							Content   string `json:"content"`
							Thumbnail string `json:"thumbnail"`
						}, 0, 1)
					} else {
						out.Attachment = []struct {
							ID       string `json:"id"`
							Filename string `json:"filename"`
							Author   struct {
								Key       string `json:"key"`
								AccountID string `json:"accountId"`
							} `json:"author"`
							Created   string `json:"created"`
							Size      int    `json:"size"`
							MimeType  string `json:"mimeType"`
							Content   string `json:"content"`
							Thumbnail string `json:"thumbnail"`
						}{}
					}
				} else {
					out.Attachment = (out.Attachment)[:0]
				}
				for !in.IsDelim(']') {
					var v42 struct {
						ID       string `json:"id"`
						Filename string `json:"filename"`
						Author   struct {
							Key       string `json:"key"`
							AccountID string `json:"accountId"`
						} `json:"author"`
						Created   string `json:"created"`
						Size      int    `json:"size"`
						MimeType  string `json:"mimeType"`
						Content   string `json:"content"`
						Thumbnail string `json:"thumbnail"`
					}
					easyjson2a877177Decode14(in, &v42)
					out.Attachment = append(out.Attachment, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal26(out *jwriter.Writer, in issueFields) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix[1:])
		easyjson2a877177Encode8(out, in.Project)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.Raw((in.Description).MarshalJSON())
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		easyjson2a877177Encode9(out, in.Comment)
	}
	{
		const prefix string = ",\"summary\":"
		out.RawString(prefix)
		out.String(string(in.Summary))
	}
	{
		const prefix string = ",\"duedate\":"
		out.RawString(prefix)
		out.String(string(in.DueDate))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.String(string(in.Updated))
	}
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		easyjson2a877177Encode8(out, *in.Parent)
	}
	{
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		easyjson2a877177Encode10(out, in.Priority)
	}
	{
		const prefix string = ",\"issuetype\":"
		out.RawString(prefix)
		easyjson2a877177Encode10(out, in.IssueType)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		easyjson2a877177Encode11(out, in.Status)
	}
	{
		const prefix string = ",\"resolution\":"
		out.RawString(prefix)
		easyjson2a877177Encode12(out, in.Resolution)
	}
	{
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		(in.Creator).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"reporter\":"
		out.RawString(prefix)
		(in.Reporter).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"assignee\":"
		out.RawString(prefix)
		(in.Assignee).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Labels {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"issuelinks\":"
		out.RawString(prefix)
		if in.IssueLinks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.IssueLinks {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjson2a877177Encode13(out, v46)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"attachment\":"
		out.RawString(prefix)
		if in.Attachment == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Attachment {
				if v47 > 0 {
					out.RawByte(',')
				}
				easyjson2a877177Encode14(out, v48)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueFields) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueFields) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueFields) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueFields) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal26(l, v)
}
func easyjson2a877177Decode14(in *jlexer.Lexer, out *struct {
	ID       string `json:"id"`
	Filename string `json:"filename"`
	Author   struct {
		Key       string `json:"key"`
		AccountID string `json:"accountId"`
	} `json:"author"`
	Created   string `json:"created"`
	Size      int    `json:"size"`
	MimeType  string `json:"mimeType"`
	Content   string `json:"content"`
	Thumbnail string `json:"thumbnail"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "filename":
			out.Filename = string(in.String())
		case "author":
			easyjson2a877177Decode15(in, &out.Author)
		case "created":
			out.Created = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "mimeType":
			out.MimeType = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "thumbnail":
			out.Thumbnail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode14(out *jwriter.Writer, in struct {
	ID       string `json:"id"`
	Filename string `json:"filename"`
	Author   struct {
		Key       string `json:"key"`
		AccountID string `json:"accountId"`
	} `json:"author"`
	Created   string `json:"created"`
	Size      int    `json:"size"`
	MimeType  string `json:"mimeType"`
	Content   string `json:"content"`
	Thumbnail string `json:"thumbnail"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjson2a877177Encode15(out, in.Author)
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"mimeType\":"
		out.RawString(prefix)
		out.String(string(in.MimeType))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"thumbnail\":"
		out.RawString(prefix)
		out.String(string(in.Thumbnail))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode15(in *jlexer.Lexer, out *struct {
	Key       string `json:"key"`
	AccountID string `json:"accountId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "accountId":
			out.AccountID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode15(out *jwriter.Writer, in struct {
	Key       string `json:"key"`
	AccountID string `json:"accountId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode13(in *jlexer.Lexer, out *struct {
	ID   string `json:"id"`
	Type struct {
		Name string `json:"name"`
	} `json:"type"`
	OutwardIssue linkedIssue `json:"outwardIssue"`
	InwardIssue  linkedIssue `json:"inwardIssue"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			easyjson2a877177Decode12(in, &out.Type)
		case "outwardIssue":
			(out.OutwardIssue).UnmarshalEasyJSON(in)
		case "inwardIssue":
			(out.InwardIssue).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode13(out *jwriter.Writer, in struct {
	ID   string `json:"id"`
	Type struct {
		Name string `json:"name"`
	} `json:"type"`
	OutwardIssue linkedIssue `json:"outwardIssue"`
	InwardIssue  linkedIssue `json:"inwardIssue"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		easyjson2a877177Encode12(out, in.Type)
	}
	{
		const prefix string = ",\"outwardIssue\":"
		out.RawString(prefix)
		(in.OutwardIssue).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"inwardIssue\":"
		out.RawString(prefix)
		(in.InwardIssue).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson2a877177Decode12(in *jlexer.Lexer, out *struct {
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode12(out *jwriter.Writer, in struct {
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode11(in *jlexer.Lexer, out *struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode11(out *jwriter.Writer, in struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode10(in *jlexer.Lexer, out *struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode10(out *jwriter.Writer, in struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson2a877177Decode9(in *jlexer.Lexer, out *struct{ Comments []comment }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]comment, 0, 1)
					} else {
						out.Comments = []comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v49 comment
					(v49).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode9(out *jwriter.Writer, in struct{ Comments []comment }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix[1:])
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Comments {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson2a877177Decode8(in *jlexer.Lexer, out *struct {
	ID  string `json:"id"`
	Key string `json:"key"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode8(out *jwriter.Writer, in struct {
	ID  string `json:"id"`
	Key string `json:"key"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptJiraInternal27(in *jlexer.Lexer, out *idValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal27(out *jwriter.Writer, in idValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v idValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v idValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *idValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *idValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal27(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal28(in *jlexer.Lexer, out *customFieldQueryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal28(out *jwriter.Writer, in customFieldQueryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v customFieldQueryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v customFieldQueryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *customFieldQueryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *customFieldQueryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal28(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal29(in *jlexer.Lexer, out *comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "self":
			out.Self = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "author":
			(out.Author).UnmarshalEasyJSON(in)
		case "body":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Body).UnmarshalJSON(data))
			}
		case "created":
			out.Created = string(in.String())
		case "updated":
			out.Updated = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal29(out *jwriter.Writer, in comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix[1:])
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.Raw((in.Body).MarshalJSON())
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.String(string(in.Created))
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.String(string(in.Updated))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal29(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal30(in *jlexer.Lexer, out *changeLogItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field":
			out.Field = string(in.String())
		case "fieldtype":
			out.FieldType = string(in.String())
		case "from":
			out.From = string(in.String())
		case "fromString":
			out.FromString = string(in.String())
		case "to":
			out.To = string(in.String())
		case "toString":
			out.ToString = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal30(out *jwriter.Writer, in changeLogItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"field\":"
		out.RawString(prefix[1:])
		out.String(string(in.Field))
	}
	{
		const prefix string = ",\"fieldtype\":"
		out.RawString(prefix)
		out.String(string(in.FieldType))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"fromString\":"
		out.RawString(prefix)
		out.String(string(in.FromString))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"toString\":"
		out.RawString(prefix)
		out.String(string(in.ToString))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v changeLogItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v changeLogItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *changeLogItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *changeLogItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal30(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal31(in *jlexer.Lexer, out *boardSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "self":
			out.Self = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "location":
			easyjson2a877177Decode16(in, &out.Location)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal31(out *jwriter.Writer, in boardSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix)
		out.String(string(in.Self))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		easyjson2a877177Encode16(out, in.Location)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v boardSource) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v boardSource) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *boardSource) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *boardSource) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal31(l, v)
}
func easyjson2a877177Decode16(in *jlexer.Lexer, out *struct {
	ID         int    `json:"projectId"`
	ProjectKey string `json:"projectKey"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "projectId":
			out.ID = int(in.Int())
		case "projectKey":
			out.ProjectKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177Encode16(out *jwriter.Writer, in struct {
	ID         int    `json:"projectId"`
	ProjectKey string `json:"projectKey"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"projectId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"projectKey\":"
		out.RawString(prefix)
		out.String(string(in.ProjectKey))
	}
	out.RawByte('}')
}
func easyjson2a877177DecodeGithubComPinptJiraInternal32(in *jlexer.Lexer, out *boardIssueRes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal32(out *jwriter.Writer, in boardIssueRes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v boardIssueRes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v boardIssueRes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *boardIssueRes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *boardIssueRes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal32(l, v)
}
func easyjson2a877177DecodeGithubComPinptJiraInternal33(in *jlexer.Lexer, out *Avatars) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "16x16":
			out.XSmall = string(in.String())
		case "24x24":
			out.Small = string(in.String())
		case "32x32":
			out.Medium = string(in.String())
		case "48x48":
			out.Large = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2a877177EncodeGithubComPinptJiraInternal33(out *jwriter.Writer, in Avatars) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"16x16\":"
		out.RawString(prefix[1:])
		out.String(string(in.XSmall))
	}
	{
		const prefix string = ",\"24x24\":"
		out.RawString(prefix)
		out.String(string(in.Small))
	}
	{
		const prefix string = ",\"32x32\":"
		out.RawString(prefix)
		out.String(string(in.Medium))
	}
	{
		const prefix string = ",\"48x48\":"
		out.RawString(prefix)
		out.String(string(in.Large))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Avatars) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2a877177EncodeGithubComPinptJiraInternal33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Avatars) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2a877177EncodeGithubComPinptJiraInternal33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Avatars) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2a877177DecodeGithubComPinptJiraInternal33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Avatars) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2a877177DecodeGithubComPinptJiraInternal33(l, v)
}
